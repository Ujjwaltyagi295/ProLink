function getAllMyProjects(request, response):
    userId = request.userId

    // 1. Fetch projects owned by the user
    userProjects = SELECT * FROM projects WHERE ownerId = userId

    // 2. Fetch projects where the user is a member
    memberProjects = SELECT * FROM projectMembers WHERE userId = userId

    // 3. Collect all unique project IDs (owned + member)
    ownedProjectIds = [project.id for project in userProjects]
    memberProjectIds = [member.projectId for member in memberProjects]
    projectIds = UNIQUE(ownedProjectIds + memberProjectIds)

    // 4. If user owns no projects but is a member in some, fetch those projects
    if userProjects is empty:
        memberProject = SELECT * FROM projects WHERE id IN memberProjectIds
        if memberProject is not empty:
            userProjects = memberProject
        else:
            return response with empty list

    // 5. Fetch related data for all relevant projects
    roles = SELECT * FROM projectRoles WHERE projectId IN projectIds
    techStack = SELECT * FROM projectTechStack WHERE projectId IN projectIds
    members = SELECT * FROM projectMembers WHERE projectId IN projectIds
    applications = SELECT * FROM projectApplications WHERE projectId IN projectIds

    // 6. Assemble final result for each project
    result = []
    for project in userProjects:
        projectData = project
        projectData.roles = FILTER roles WHERE role.projectId == project.id
        projectData.techStack = [tech.techStack for tech in techStack WHERE tech.projectId == project.id]
        projectData.members = FILTER members WHERE member.projectId == project.id
        projectData.applications = FILTER applications WHERE application.projectId == project.id
        result.append(projectData)

    // 7. Return the assembled project list
    return response with result
